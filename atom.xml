<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Topredator</title>
  
  <subtitle>人生若只如初见</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://topredator.github.io/"/>
  <updated>2019-03-16T11:22:56.750Z</updated>
  <id>https://topredator.github.io/</id>
  
  <author>
    <name>Topredator</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS客户端启动原理</title>
    <link href="https://topredator.github.io/2019/03/16/iOS%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%90%AF%E5%8A%A8%E5%8E%9F%E7%90%86/"/>
    <id>https://topredator.github.io/2019/03/16/iOS客户端启动原理/</id>
    <published>2019-03-16T11:06:46.000Z</published>
    <updated>2019-03-16T11:22:56.750Z</updated>
    
    <content type="html"><![CDATA[<h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><blockquote><p>T(APP总启动时间) = T1(main()之前的加载时间)+T2(main()之后的加载时间)<br>T1 = 系统dylib(动态链接库) 和 自身APP可执行文件加载<br>T2 = 构建第一个界面并完成渲染展示</p></blockquote><a id="more"></a><h3 id="一、main-之前的加载过程"><a href="#一、main-之前的加载过程" class="headerlink" title="一、main()之前的加载过程"></a>一、main()之前的加载过程</h3><p>系统首先加载可执行文件，然后加载动态链接库dyld。（镜像）</p><p><code>dyld包括</code>：framework，runtime方法的libobjc， 系统级别的libSystem(如:GCD,Block)</p><p><code>dyld优点</code>：代码共用、易于维护、减少可执行文件体积</p><p><strong>所有动态链接库和静态库.a及所有的类文件编译后的.o文件最终都由dyld加载到内存中，每个镜像都由一个imageLoader类负责加载</strong></p><h4 id="加载步骤"><a href="#加载步骤" class="headerlink" title="加载步骤"></a>加载步骤</h4><ul><li>load dylibs image 读取镜像文件</li><li>Rebase image</li><li>Bind image</li><li>Objc setup</li><li>initializers</li></ul><h5 id="load-dylibs-image"><a href="#load-dylibs-image" class="headerlink" title="load dylibs image"></a>load dylibs image</h5><blockquote><p> 分析依赖的动态库、找到动态库的mach-o文件、打开文件、验证文件、签名、调用mmap()</p></blockquote><p><code>优化</code>：减少非系统库的依赖、合并非系统库、使用静态资源(代码写入主程序)</p><h5 id="Rebase-Bind"><a href="#Rebase-Bind" class="headerlink" title="Rebase/Bind"></a>Rebase/Bind</h5><blockquote><p>可执行文件和动态链接库<strong>虚拟内存中加载地址每次启动不固定</strong>，所以需要2步修复镜像中的资源指针，指向正确的地址</p></blockquote><p><code>Rebase</code>：修复当前镜像内部的资源指针；读入内存、加密验证；IO是瓶颈</p><p><code>Bind</code>：查询符号表来指向跨境像资源，CPU是瓶颈。</p><p><code>优化</code>：减少Objc类数量、减少selector数量、减少C++虚函数数量</p><h5 id="Objc-setup"><a href="#Objc-setup" class="headerlink" title="Objc setup"></a>Objc setup</h5><blockquote><p><strong>主要作用</strong> ：注册Objc类、把category定义插入列表、保证每个selector唯一</p></blockquote><h5 id="initializers"><a href="#initializers" class="headerlink" title="initializers"></a>initializers</h5><blockquote><p>属于<strong>动态调整</strong>，开始在堆栈中写入内容；<strong>作用</strong>：+load()函数、C++的构造函数属性函数、静态全局变量的创建。Objc的+load()及C++静态构造函数，保证每个执行的方法都可以找到所依赖的动态库</p></blockquote><h4 id="main-之前耗时优化点"><a href="#main-之前耗时优化点" class="headerlink" title="main()之前耗时优化点"></a>main()之前耗时优化点</h4><ul><li><p>减少不必要的framework，因为动态链接比较耗时</p></li><li><p>合并或者删减一些OC类，清理项目中没用到的类</p><p>减少一些无用的静态变量</p><p>删减没用到或者已经废弃的方法</p><p>将不必须在+load()方法中的操作延迟到+initialize中</p></li></ul><h3 id="二、main-之后的加载"><a href="#二、main-之后的加载" class="headerlink" title="二、main()之后的加载"></a>二、main()之后的加载</h3><p>主要是<strong>试图渲染</strong></p><ul><li>准备阶段 <strong>图片的解码</strong></li><li>布局  首页UIView 的 layoutSubviews运行</li><li>绘制  首页UIView 的 drawRect运行</li><li>各种服务启动、必要的数据创建与读取</li></ul><p><code>优化</code>：不使用xib或者storeboard，直接代码加载首试图、NSLog打印会隐式的创建Calendar，减少启动时各种业务的log、启动时的网络请求，统一异步线程中执行</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;T(APP总启动时间) = T1(main()之前的加载时间)+T2(main()之后的加载时间)&lt;br&gt;T1 = 系统dylib(动态链接库) 和 自身APP可执行文件加载&lt;br&gt;T2 = 构建第一个界面并完成渲染展示&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="https://topredator.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>UML图关系</title>
    <link href="https://topredator.github.io/2019/03/16/UML%E5%9B%BE%E5%85%B3%E7%B3%BB/"/>
    <id>https://topredator.github.io/2019/03/16/UML图关系/</id>
    <published>2019-03-16T10:58:34.000Z</published>
    <updated>2019-03-16T11:03:47.333Z</updated>
    
    <content type="html"><![CDATA[<p><strong>UML类图的六大关系分析</strong></p><a id="more"></a><ul><li><p>泛化（generalization）</p><p>是一种继承关系，表示一般与特殊的关系，它指定了子类如何特化父类的所有特征和行为。</p><pre><code>继承关系（老虎 －▷动物）:带三角箭头的实线，箭头指向父类</code></pre></li><li><p>实现（Realization）</p><p>是一种类与接口的关系，表示类是接口所有特征和行为的实现.</p><pre><code>类与接口关系（······▷）：带三角箭头的虚线，箭头指向接口</code></pre></li><li><p>关联（Association）</p><p>是一种拥有的关系，它使一个类知道另一个类的属性和方法（单双向）；</p><pre><code>拥有关系（老师－学生→课程）：带普通箭头的实心线，指向被拥有者（单项有箭头）</code></pre></li><li><p>聚合（Aggregation）</p><p> 整体与部分关系(部分离开整体可以单独存在)</p><pre><code>（汽车♢→轮胎）: 带空心菱形的实心线，菱形指向整体</code></pre></li><li><p>组合（Composition）</p><p> 整体与部分(部分不能离开整体单独存在)</p><pre><code>（公司♦→部门）:带实心菱形的实线，菱形指向整体</code></pre></li><li><p>依赖（Dependence）</p><p>是一种使用的关系，即一个类的实现需要另一个类的协助，所以要尽量不使用双向的互相依赖.</p><pre><code>使用关系(方法参数/对静态方法调用)（····＞）：带箭头的虚线，指向被使用者</code></pre></li></ul><h4 id="各种关系的强弱顺序："><a href="#各种关系的强弱顺序：" class="headerlink" title="各种关系的强弱顺序："></a>各种关系的强弱顺序：</h4><p><strong>泛化</strong> <strong>=</strong> <strong>实现</strong> <strong>&gt;</strong> <strong>组合</strong> <strong>&gt;</strong> <strong>聚合</strong> <strong>&gt;</strong> <strong>关联</strong> <strong>&gt;</strong> <strong>依赖</strong> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;UML类图的六大关系分析&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="UML" scheme="https://topredator.github.io/tags/UML/"/>
    
  </entry>
  
  <entry>
    <title>Git的命令使用</title>
    <link href="https://topredator.github.io/2019/03/15/Git%E7%9A%84%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/"/>
    <id>https://topredator.github.io/2019/03/15/Git的命令使用/</id>
    <published>2019-03-15T07:02:36.604Z</published>
    <updated>2019-03-16T08:37:24.604Z</updated>
    
    <content type="html"><![CDATA[<p><strong>常用的命令使用</strong></p><a id="more"></a><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p><code>git config [--local / --gloab / --system]  user.name  &#39;XXXXX&#39;</code><br><code>git config [--local / --gloab / --system] user.email  &#39;XXXX&#39;</code><br>注释：<code>local 区域为本仓库</code>   / <code>global 当前用户的所有仓库</code> / <code>system 本系统的所有用户</code></p><h4 id="log"><a href="#log" class="headerlink" title="log"></a>log</h4><p><code>git log --all 查看所有分支的历史</code></p><p><code>git log --all --graph 查看图形化的 log 地址</code></p><p><code>git log --oneline 查看单行的简洁历史</code></p><p><code>git log --oneline -n4 查看最近的四条简洁历史</code></p><p><code>git log --oneline --all -n4 --graph 查看所有分支最近 4 条单行的图形化历史</code></p><p><code>git help --web log 跳转到git log 的帮助文档网页</code></p><p><code>git mv readme readme.md 直接用git更改文件名</code></p><p><code>git cat-file -p &#39;commitId&#39; 查看commit对象</code></p><h4 id="比较两次commit差异"><a href="#比较两次commit差异" class="headerlink" title="比较两次commit差异"></a>比较两次commit差异</h4><ul><li><code>git diff &#39;commitId1&#39; &#39;commitId2&#39;</code>   <strong>或者</strong> <code>git diff HEAD [HEAD^/HEAD~1]</code> </li><li>暂存区与HEAD的比较 <code>git diff --cached</code></li></ul><p>####更改之前的commit提交的信息</p><p><code>git rebase -i [super commitId]</code></p><p><code>pick 改为 reword/r</code></p><h4 id="合并多个commit"><a href="#合并多个commit" class="headerlink" title="合并多个commit"></a>合并多个commit</h4><p><code>git rebase -i [super commitId]</code></p><p><code>保留一个pick，将需要融合的commit方到pick的下面，前面的pick改为 squash/s</code>    </p><h5 id="取消合并"><a href="#取消合并" class="headerlink" title="取消合并"></a>取消合并</h5><p><code>git rebase --abort</code></p><ul><li><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><p><strong>创建：</strong></p><p><code>git branch &lt;branchName&gt;</code></p><p><strong>查看：</strong></p><p><code>git branch</code>(本地)</p><p><code>git branch -a</code>(远端)</p><p><strong>切换：</strong></p><p><code>git checkout &lt;branchName&gt;</code></p><p><strong>创建+切换：</strong></p><p><code>git checkout -b &lt;branchName&gt;</code></p><p><strong>删除：</strong></p><p><code>git branch -d &lt;branchName&gt;</code></p><p><code>git branch -D &lt;branchName&gt;</code>(强行删除)</p><p><code>git push &lt;origin&gt; --delete &lt;branchName&gt;</code>(删除远端分支)</p><p><strong>合并：</strong></p><p><code>git merge &lt;branchName&gt;</code></p><p><code>git rebase &lt;branchName&gt;</code></p><p>merge 快速合并，看不到曾经合并；merge –no-ff 普通合并，可看历史合并； </p><p><strong>查看分支合并图：</strong></p><p><code>git log --graph</code></p><p><strong>拉取远端分支（本地无此分支）：</strong></p><p><code>git checkout -b &lt;branchName&gt; &lt;origin&gt;/&lt;branchName&gt; 若失败，先fetch，再执行</code></p></li></ul><ul><li><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p><strong>创建：</strong></p><p><code>git tag &lt;tagName&gt;</code></p><p><code>git tag &lt;tagName&gt; &lt;commit id&gt;</code></p><p><strong>查看：</strong></p><p><code>git tag</code></p><p><code>git show &lt;tagName&gt;</code></p><p><strong>给已提交的内容打tag：</strong></p><p><code>git tag &lt;tagName&gt; &lt;commit id&gt;</code></p><p><strong>指定标签信息：</strong></p><p><code>git tag -a &lt;tagName&gt; -m &quot;xxx&quot;</code></p><p><strong>删除：</strong></p><p><code>git tag -d &lt;tagName&gt;</code></p><p><code>git push &lt;origin&gt; :ref/tags/&lt;tagName&gt;</code>(删除远端，先删除本地)</p><p><strong>推送：</strong></p><p><code>git push &lt;origin&gt; &lt;tagName&gt;</code></p><p><code>git push &lt;origin&gt; --tags</code></p></li><li><h3 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h3><p><code>git remote add &lt;origin&gt; &lt;url&gt;</code></p><p><strong>推送：</strong></p><p><code>git push -u origin master</code>(第一次推送)</p><p><code>git push &lt;origin&gt; master</code></p><p><strong>克隆：</strong></p><p><code>git clong &lt;url&gt;</code></p><p><strong>本地分支与远端分支建立连接：</strong></p><p><code>git branch --set-upstream-to &lt;localBranchName&gt; &lt;origin&gt;/&lt;remoteBranchName&gt;</code></p></li></ul><ul><li><h3 id="储藏"><a href="#储藏" class="headerlink" title="储藏"></a>储藏</h3><p><strong>储藏：</strong></p><p><code>git stash</code></p><p><strong>查看储藏现场：</strong></p><p><code>git stash list</code></p><p><strong>恢复现场：</strong></p><p><code>git stash apply</code>(不删除现场)</p><p><code>git stash pop</code>(删除现场)</p></li></ul><ul><li><h3 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h3><p><strong>没有add，没有commit：</strong></p><p><code>git checkout --file &lt;file&gt;</code></p><p><strong>add后，没有commit：</strong></p><p><code>git reset HEAD &lt;file&gt;</code></p><p><code>git reset HEAD</code></p><p><strong>add且commit：</strong></p><p><code>git reset --hard &lt;HEAD^&gt;</code></p><p><code>git reset --hard &lt;commit id&gt;</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;常用的命令使用&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="https://topredator.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://topredator.github.io/2019/03/15/hello-world/"/>
    <id>https://topredator.github.io/2019/03/15/hello-world/</id>
    <published>2019-03-15T05:37:18.779Z</published>
    <updated>2019-03-15T05:37:18.779Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
